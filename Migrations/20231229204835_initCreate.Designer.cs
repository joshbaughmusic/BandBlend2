// <auto-generated />
using System;
using BandBlend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BandBlend2.Migrations
{
    [DbContext(typeof(BandBlendDbContext))]
    [Migration("20231229204835_initCreate")]
    partial class initCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BandBlend.Models.AdditionalPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AdditionalPictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Url = "https://images.unsplash.com/photo-1516122276289-c28ffbaf888c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1287&q=80",
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("BandBlend.Models.BlockedAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockedUserProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileThatBlockedId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserProfileId");

                    b.HasIndex("UserProfileThatBlockedId");

                    b.ToTable("BlockedAccounts");
                });

            modelBuilder.Entity("BandBlend.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BandBlend.Models.CommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("BandBlend.Models.FeedPrimaryGenreSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("FeedPrimaryGenreSubscriptions");
                });

            modelBuilder.Entity("BandBlend.Models.FeedPrimaryInstrumentSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PrimaryInstrumentId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryInstrumentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("FeedPrimaryInstrumentSubscriptions");
                });

            modelBuilder.Entity("BandBlend.Models.FeedStateSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("FeedStateSubscriptions");
                });

            modelBuilder.Entity("BandBlend.Models.FeedUserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserSubbedToId")
                        .HasColumnType("integer");

                    b.Property<int>("UserThatSubbedId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserSubbedToId");

                    b.HasIndex("UserThatSubbedId");

                    b.ToTable("FeedUserSubscriptions");
                });

            modelBuilder.Entity("BandBlend.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int>("MessageConversationId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<string>("ReceiverIdentityUserId")
                        .HasColumnType("text");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("SenderIdentityUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageConversationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BandBlend.Models.MessageConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastMessageDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId1")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId2")
                        .HasColumnType("integer");

                    b.Property<string>("UserProfileIdIdentityUserId1")
                        .HasColumnType("text");

                    b.Property<string>("UserProfileIdIdentityUserId2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId1");

                    b.HasIndex("UserProfileId2");

                    b.ToTable("MessageConversations");
                });

            modelBuilder.Entity("BandBlend.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BandBlend.Models.PostLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("BandBlend.Models.PrimaryGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PrimaryGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alternative"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blues"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Classical"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Country"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Electronic"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Folk"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Hip-Hop"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Indie"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Metal"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Punk"
                        },
                        new
                        {
                            Id = 13,
                            Name = "R&B"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Rap"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Reggae"
                        });
                });

            modelBuilder.Entity("BandBlend.Models.PrimaryInstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PrimaryInstruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Acoustic Guitar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bass"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clarinet"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drums"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Electric Guitar"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Flute"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Harp"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Keyboard"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Piano"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Saxophone"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Steel Drum"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Trombone"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Trumpet"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Vocals"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Violin"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Band"
                        });
                });

            modelBuilder.Entity("BandBlend.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("text");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("text");

                    b.Property<int>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int?>("PrimaryInstrumentId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("SpotifyLink")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("TikTokLink")
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("PrimaryInstrumentId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Hey there, I'm Josh, a musician turned full-time software developer. Thanks for stopping by Band Blend! I created this platform to make it easier for musicians and bands to connect and collaborate. Finding new band members and collaborators can be tough, so I built Band Blend to help out. Have a look around, and if you've got any questions, shoot me a message here. Enjoy!",
                            City = "Nashville",
                            FacebookLink = "https://www.facebook.com/joshbaughmusic/",
                            InstagramLink = "https://www.instagram.com/joshbaughmusic/",
                            PrimaryGenreId = 11,
                            PrimaryInstrumentId = 2,
                            ProfilePicture = "https://images.unsplash.com/photo-1516122276289-c28ffbaf888c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1287&q=80",
                            StateId = 42,
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("BandBlend.Models.ProfileSubGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("SubGenreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SubGenreId");

                    b.ToTable("ProfileSubGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProfileId = 1,
                            SubGenreId = 9
                        },
                        new
                        {
                            Id = 2,
                            ProfileId = 1,
                            SubGenreId = 25
                        },
                        new
                        {
                            Id = 3,
                            ProfileId = 1,
                            SubGenreId = 26
                        });
                });

            modelBuilder.Entity("BandBlend.Models.ProfileTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TagId");

                    b.ToTable("ProfileTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProfileId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProfileId = 1,
                            TagId = 9
                        },
                        new
                        {
                            Id = 3,
                            ProfileId = 1,
                            TagId = 14
                        });
                });

            modelBuilder.Entity("BandBlend.Models.SavedProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("UserProfileId");

                    b.ToTable("SavedProfiles");
                });

            modelBuilder.Entity("BandBlend.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AL"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AK"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AZ"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CA"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CO"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CT"
                        },
                        new
                        {
                            Id = 8,
                            Name = "DE"
                        },
                        new
                        {
                            Id = 9,
                            Name = "FL"
                        },
                        new
                        {
                            Id = 10,
                            Name = "GA"
                        },
                        new
                        {
                            Id = 11,
                            Name = "HI"
                        },
                        new
                        {
                            Id = 12,
                            Name = "ID"
                        },
                        new
                        {
                            Id = 13,
                            Name = "IL"
                        },
                        new
                        {
                            Id = 14,
                            Name = "IN"
                        },
                        new
                        {
                            Id = 15,
                            Name = "IA"
                        },
                        new
                        {
                            Id = 16,
                            Name = "KS"
                        },
                        new
                        {
                            Id = 17,
                            Name = "KY"
                        },
                        new
                        {
                            Id = 18,
                            Name = "LA"
                        },
                        new
                        {
                            Id = 19,
                            Name = "ME"
                        },
                        new
                        {
                            Id = 20,
                            Name = "MD"
                        },
                        new
                        {
                            Id = 21,
                            Name = "MA"
                        },
                        new
                        {
                            Id = 22,
                            Name = "MI"
                        },
                        new
                        {
                            Id = 23,
                            Name = "MN"
                        },
                        new
                        {
                            Id = 24,
                            Name = "MS"
                        },
                        new
                        {
                            Id = 25,
                            Name = "MO"
                        },
                        new
                        {
                            Id = 26,
                            Name = "MT"
                        },
                        new
                        {
                            Id = 27,
                            Name = "NE"
                        },
                        new
                        {
                            Id = 28,
                            Name = "NV"
                        },
                        new
                        {
                            Id = 29,
                            Name = "NH"
                        },
                        new
                        {
                            Id = 30,
                            Name = "NJ"
                        },
                        new
                        {
                            Id = 31,
                            Name = "NM"
                        },
                        new
                        {
                            Id = 32,
                            Name = "NY"
                        },
                        new
                        {
                            Id = 33,
                            Name = "NC"
                        },
                        new
                        {
                            Id = 34,
                            Name = "ND"
                        },
                        new
                        {
                            Id = 35,
                            Name = "OH"
                        },
                        new
                        {
                            Id = 36,
                            Name = "OK"
                        },
                        new
                        {
                            Id = 37,
                            Name = "OR"
                        },
                        new
                        {
                            Id = 38,
                            Name = "PA"
                        },
                        new
                        {
                            Id = 39,
                            Name = "RI"
                        },
                        new
                        {
                            Id = 40,
                            Name = "SC"
                        },
                        new
                        {
                            Id = 41,
                            Name = "SD"
                        },
                        new
                        {
                            Id = 42,
                            Name = "TN"
                        },
                        new
                        {
                            Id = 43,
                            Name = "TX"
                        },
                        new
                        {
                            Id = 44,
                            Name = "UT"
                        },
                        new
                        {
                            Id = 45,
                            Name = "VT"
                        },
                        new
                        {
                            Id = 46,
                            Name = "VA"
                        },
                        new
                        {
                            Id = 47,
                            Name = "WA"
                        },
                        new
                        {
                            Id = 48,
                            Name = "WV"
                        },
                        new
                        {
                            Id = 49,
                            Name = "WI"
                        },
                        new
                        {
                            Id = 50,
                            Name = "WY"
                        });
                });

            modelBuilder.Entity("BandBlend.Models.SubGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Acoustic Folk"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alternative Rock"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bossa-Nova"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chicago Blues"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Classic Rock"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Contemporary R&B"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Country Pop"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dance Pop"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Deathcore"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Delta Blues"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Dream Pop"
                        },
                        new
                        {
                            Id = 12,
                            Name = "East Coast Hip-Hop"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Fusion Jazz"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Glam Rock"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Grunge"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Hard Rock"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Hardcore Punk"
                        },
                        new
                        {
                            Id = 18,
                            Name = "House"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Indie Folk"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Indie Pop"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Melodic Death Metal"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Metalcore"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Motown"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Neo-Soul"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Nu Metal"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Pop Punk"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Pop Rock"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Post-Punk"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Progressive Metal"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Punk"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Smooth Jazz"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Hardcore"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Synth-pop"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Techno"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Thrash Metal"
                        },
                        new
                        {
                            Id = 36,
                            Name = "West Coast Hip-Hop"
                        });
                });

            modelBuilder.Entity("BandBlend.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Beginner Friendly"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Casual"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Collaborative"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hobbyist"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Paying Gigs Only"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Passion First"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Professional"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Recording"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Serious"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Session Musician"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Songwriter"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Studio Musician"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Touring"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Versatile"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Weekend Warrior"
                        });
                });

            modelBuilder.Entity("BandBlend.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccountBanned")
                        .HasColumnType("boolean");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsBand")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountBanned = false,
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            IsBand = false,
                            Name = "Josh Baugh"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "d13f78a0-531c-4ae4-92d6-e1ea9fdd7d63",
                            Name = "User",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ec7726c-a3e5-4e60-a6ff-f397bfddb148",
                            Email = "joshbaughmusic_bb@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEnM+X0oX0pgQAitCj06FC+LaEoh7Rg02I2pMZ+y2Ko4fkaQ60D7KB1jULUz1njUsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c31c049-c27f-46da-9ae7-c2e89bf31ea5",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BandBlend.Models.BlockedAccount", b =>
                {
                    b.HasOne("BandBlend.Models.UserProfile", "BlockedUserProfile")
                        .WithMany()
                        .HasForeignKey("BlockedUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfileThatBlocked")
                        .WithMany()
                        .HasForeignKey("UserProfileThatBlockedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockedUserProfile");

                    b.Navigation("UserProfileThatBlocked");
                });

            modelBuilder.Entity("BandBlend.Models.Comment", b =>
                {
                    b.HasOne("BandBlend.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.CommentLike", b =>
                {
                    b.HasOne("BandBlend.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.FeedPrimaryGenreSubscription", b =>
                {
                    b.HasOne("BandBlend.Models.PrimaryGenre", "PrimaryGenre")
                        .WithMany()
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryGenre");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.FeedPrimaryInstrumentSubscription", b =>
                {
                    b.HasOne("BandBlend.Models.PrimaryInstrument", "PrimaryInstrument")
                        .WithMany()
                        .HasForeignKey("PrimaryInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryInstrument");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.FeedStateSubscription", b =>
                {
                    b.HasOne("BandBlend.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.FeedUserSubscription", b =>
                {
                    b.HasOne("BandBlend.Models.UserProfile", "UserSubbedTo")
                        .WithMany()
                        .HasForeignKey("UserSubbedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserThatSubbed")
                        .WithMany()
                        .HasForeignKey("UserThatSubbedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSubbedTo");

                    b.Navigation("UserThatSubbed");
                });

            modelBuilder.Entity("BandBlend.Models.Message", b =>
                {
                    b.HasOne("BandBlend.Models.MessageConversation", "MessageConversation")
                        .WithMany()
                        .HasForeignKey("MessageConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageConversation");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BandBlend.Models.MessageConversation", b =>
                {
                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile1")
                        .WithMany()
                        .HasForeignKey("UserProfileId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile2")
                        .WithMany()
                        .HasForeignKey("UserProfileId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile1");

                    b.Navigation("UserProfile2");
                });

            modelBuilder.Entity("BandBlend.Models.Post", b =>
                {
                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.PostLike", b =>
                {
                    b.HasOne("BandBlend.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.Profile", b =>
                {
                    b.HasOne("BandBlend.Models.PrimaryGenre", "PrimaryGenre")
                        .WithMany()
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.PrimaryInstrument", "PrimaryInstrument")
                        .WithMany()
                        .HasForeignKey("PrimaryInstrumentId");

                    b.HasOne("BandBlend.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithOne("Profile")
                        .HasForeignKey("BandBlend.Models.Profile", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryGenre");

                    b.Navigation("PrimaryInstrument");

                    b.Navigation("State");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.ProfileSubGenre", b =>
                {
                    b.HasOne("BandBlend.Models.Profile", "Profile")
                        .WithMany("ProfileSubGenres")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.SubGenre", "SubGenre")
                        .WithMany()
                        .HasForeignKey("SubGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("SubGenre");
                });

            modelBuilder.Entity("BandBlend.Models.ProfileTag", b =>
                {
                    b.HasOne("BandBlend.Models.Profile", "Profile")
                        .WithMany("ProfileTags")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BandBlend.Models.SavedProfile", b =>
                {
                    b.HasOne("BandBlend.Models.Profile", "Profile")
                        .WithOne("SavedProfile")
                        .HasForeignKey("BandBlend.Models.SavedProfile", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandBlend.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BandBlend.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BandBlend.Models.Profile", b =>
                {
                    b.Navigation("ProfileSubGenres");

                    b.Navigation("ProfileTags");

                    b.Navigation("SavedProfile");
                });

            modelBuilder.Entity("BandBlend.Models.UserProfile", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
